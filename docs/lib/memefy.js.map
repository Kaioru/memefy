{"version":3,"sources":["lib/node_modules/browser-pack/_prelude.js","lib/lib/index.js","lib/lib/maps/stoz.js","lib/lib/memefy.js","lib/lib/transformers/alternating.js","lib/lib/transformers/alternating2.js","lib/lib/transformers/ccfy.js","lib/lib/transformers/escalate.js","lib/lib/transformers/exaggerate.js","lib/lib/transformers/hashtag.js","lib/lib/transformers/leet.js","lib/lib/transformers/spaceout.js","lib/lib/transformers/spacierout.js","lib/node_modules/leet/leet.js","lib/node_modules/process/browser.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;;ACFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AClfile":"memefy.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","const memefy = require('./memefy')\nmodule.exports = memefy;\n","module.exports = (letter, i, exploded) => {\n  return letter === 's' ? 'z' : letter\n};\n","const memefy = {}\n\nmemefy.transformers = {}\nmemefy.transformers.ccfy = require('./transformers/ccfy')\nmemefy.transformers.spaceout = require('./transformers/spaceout')\nmemefy.transformers.spacierout = require('./transformers/spacierout')\nmemefy.transformers.escalate = require('./transformers/escalate')\nmemefy.transformers.exaggerate = require('./transformers/exaggerate')\nmemefy.transformers.leet = require('./transformers/leet')\nmemefy.transformers.hashtag = require('./transformers/hashtag')\nmemefy.transformers.alternating = require('./transformers/alternating')\nmemefy.transformers.alternating2 = require('./transformers/alternating2')\n\nfor (var transformer in memefy.transformers) {\n  memefy[transformer] = memefy.transformers[transformer]\n}\n\nmemefy.maps = {}\nmemefy.maps.stoz = require('./maps/stoz')\n\nvar sequencer = function sequencer(map, str) {\n  var exploded = str.split(\"\"),\n    i = 0\n  exploded = exploded.map(map)\n  return exploded.join(\"\")\n}\n\nfor (var map in memefy.maps) {\n  (function(map) {\n    memefy[map] = function(str) {\n      return sequencer(memefy.maps[map], str)\n    }\n  })(map)\n}\n\nmodule.exports = memefy\n","module.exports = text => {\n  var changedLast = true\n  return text.split(\"\").map(letter => {\n    if (letter === ' ') {\n      return letter\n    }\n    changedLast = !changedLast\n    return changedLast ? letter.toUpperCase() : letter.toLowerCase()\n  }).join(\"\")\n}\n","module.exports = text => {\n  var changedLast = false\n  return text.split(\"\").map(letter => {\n    if (letter === ' ') {\n      return letter\n    }\n    changedLast = !changedLast\n    return changedLast ? letter.toUpperCase() : letter.toLowerCase()\n  }).join(\"\")\n}\n","module.exports = text => {\n  var result = ''\n  var exploded = text.split(' ')\n\n  exploded.forEach(w => {\n    if (w.length > 1 && !w.endsWith('h')) {\n      var m = 2\n      if (w.endsWith('s')) m = 3\n      if (w.endsWith('est')) m = 5\n      if (w.endsWith('en') || w.endsWith('er')) m = 4\n      var c = w[w.length - m]\n      if (c === 'c') {\n        result += w.substring(0, (w.length - m) + 1) + 'c' + w.substring((w.length - m) + 2, w.length) + ' '\n        return\n      }\n    }\n    result += w + (w.endsWith('c') ? 'c ' : ' ')\n  })\n  return result.substring(0, result.length - 1)\n}\n","module.exports = text => {\n  var result = ''\n  var exploded = text.split('')\n  var min = text.length < 5 ? 1 : 3 + (text.length - text.replace(' ', '').length)\n  var escalate = [min, min + 1][\n    [Math.floor(Math.random() * 2)]\n  ]\n\n  for (i in text) {\n    result += i < escalate ? text[i].toLowerCase() : text[i].toUpperCase()\n  }\n  return result\n}\n","module.exports = text => {\n  var result = ''\n  var exploded = text.split(' ')\n  var suffix = [\n    'ed',\n    'er',\n    'est'\n  ]\n  exploded.forEach(w => {\n    for (var i in suffix) {\n      var s = suffix[i]\n      if (w.endsWith(s)) w += s\n    }\n    result += w + ' '\n  })\n  return result.substring(0, result.length - 1)\n}\n","module.exports = text => {\n  var result = ''\n  var exploded = text.split(' ')\n\n  exploded.forEach(w => {\n    result += \"#\" + w + \" \"\n  })\n  return result.substring(0, result.length - 1)\n}\n","const leet = require('leet')\n\nmodule.exports = text => {\n  return leet.convert(text)\n}\n","module.exports = text => {\n  return text.split('').join(' ')\n}\n","module.exports = text => {\n  var result = ''\n  var index = 0\n  var exploded = text.split('')\n\n  exploded.forEach(w => {\n    result += w + ' '.repeat(++index)\n  })\n  return result.trim()\n}\n","\n\n(function () {\n\n    \"use strict\";\n\n    /**\n     * Convert regular and boring text into 1337 text.\n     *\n     * @author Mathias Novas <novasism@gmail.com>, Michael Enger <mike@thelonelycoder.com>\n     * @license IDGAF\n     */\n    var leet = {\n\n        /**\n         * Map of conversions.\n         *\n         * @var object\n         */\n        characterMap: {\n            'a': '4',\n            'b': '8',\n            'e': '3',\n            'g': '6',\n            'l': '1',\n            'o': '0',\n            's': '5',\n            't': '7',\n            'æ': '43',\n            'ø': '03',\n            'å': '44'\n        },\n\n        /**\n         * Convert a string to 1337 based on the character map.\n         *\n         * @param string string Regular ol' text to convert\n         * @return string\n         */\n        convert: function (string) {\n            var letter;\n            string = string || '';\n            string = string.replace(/cks/g, 'x');\n\n            for (letter in leet.characterMap) {\n                if (leet.characterMap.hasOwnProperty(letter)) {\n                    string = string.replace(new RegExp(letter, 'g'), leet.characterMap[letter]);\n                }\n            }\n\n            return string.toUpperCase();\n        },\n\n        /**\n         * Test character to see if it's a vovel or special (or neither).\n         *\n         * @param string character Character to test\n         * @return mixed\n         */\n        test: function (character) {\n            var vowel = /^[4I30U]$/i,\n                special = /^[!?.,\\-]$/i,\n                type = false;\n\n            if (vowel.test(character)) {\n                type = 'vowel';\n            } else if (special.test(character)) {\n                type = 'special';\n            }\n\n            return type;\n        },\n\n        /**\n         * Converts the string to 1337 along with special rules.\n         *\n         * @param string string Regular ol' text to convert\n         * @return string\n         */\n        output: function (string) {\n            string = leet.convert(string);\n            if ('' === string) {\n                return string;\n            }\n\n            var last = string[string.length - 1],\n                type = leet.test(last),\n                result;\n\n            if (type === 'special') {\n                result = string.substr(0, string.length - 1) + 'ZORZ' + last;\n            } else if (type === 'vowel') {\n                result = string + 'XOR';\n            } else {\n                result = string + 'ZORZ';\n            }\n\n            return result;\n        }\n    };\n\n    if (/(^|\\/)leet(\\.js)?$/.test(process.argv[1])) {\n        if (undefined !== process.argv[2]) {\n            console.log(leet.output(process.argv[2]));\n        } else {\n            console.error('Usage: leet.js <string>');\n        }\n    } else if (undefined !== exports) {\n        exports.convert = leet.output;\n    } else {\n        console.error('I don\\'t know what to do');\n    }\n\n}());\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}